#!/bin/bash
# run -- main script
"""
Copyright (C) 2024-2025  Caden Kegg, CP17-3039 Team Captain

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
"""
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <https://www.gnu.org/licenses/>.

# This script performs the following tasks:
# 1. Sets up necessary file tree in /tmp directory using the team ID.
# 2. Prompts the user to confirm if all forensics questions have been answered.
# 3. Checks if the script is run as root, and if not, requests root access.
# 4. Downloads a README file from a provided URL and extracts a list of authorized users.
# 5. Removes all instances of netcat and related tools.
# 6. Compares the list of authorized users from the README with the actual users on the system.
# 7. Removes any unauthorized users found on the system.

# Functions:
# - printTime: Calculates and prints the elapsed time since the script started.
# - printerr: Logs error messages with a timestamp to stderr.log.
# - printsta: Logs status messages with a timestamp to stdout.log.

# Variables:
# - teamID: The team ID for the CyberPatriot competition.
# - startTime: The start time of the script.
# - ERRLOG: Temporary file for logging errors.
# - OUTLOG: Temporary file for logging output.

# Main function:
# - Sets up the file tree and changes to the team directory.
# - Prompts the user to confirm if all forensics questions have been answered.
# - Checks if the script is run as root and requests root access if not.
# - Downloads the README file and extracts the list of authorized users.
# - Removes all instances of netcat and related tools.
# - Compares the list of authorized users with the actual users on the system.
# - Removes any unauthorized users found on the system.

teamID="CP17-3039"
startTime=$( date "+%s" )
mkdir -p /tmp/${teamID}
cd /tmp/${teamID}
BACK="$(mktemp -d /tmp/$teamID/backup-XXXXXXXXXX)"
PFILEBACK="$(mktemp -d $BACK/pfilebackup-XXXXXXXXXX)"

for file in passwd groups shadow gshadow sudoers; do
	cp /etc/$file $BACK/$file.bak
	chmod 700 $BACK/$file.bak
done
ERRLOG="$(mktemp /tmp/$teamID/stderr.log-XXXXXXXXXX)" || bash -c "echo 'Failed to create error logfile' && exit 1"
OUTLOG="$(mktemp /tmp/$teamID/stdout.log-XXXXXXXXXX)" || bash -c "echo 'Failed to create output logfile' && exit 1"
printTime() {
	endTime=$( date "+%s" )
	diffTime=$(($endTime-$startTime))
	if [ $(($diffTime / 60)) -lt 10 ]
	then
		if [ $(($diffTime % 60)) -lt 10 ]
		then
			printf "0$(($diffTime / 60)):0$(($diffTime % 60)) -- $@"
		else 
			printf "0$(($diffTime / 60)):$(($diffTime % 60)) -- $@"
		fi
	else
		if [ $(($diffTime % 60)) -lt 10 ]
		then
			printf "$(($diffTime / 60)):0$(($diffTime % 60)) -- $@"
		else
			printf "$(($diffTime / 60)):$(($diffTime % 60)) -- $@"
		fi
	fi
}

printerr() {
	printTime "[ ERROR $1 ] $2" | tee -a $ERRLOG
}

printsta() {
	printTime "[ LOG ] $@" | tee -a $OUTLOG
}

main() {
	printsta "0 SCRIPT STARTED"
	echo "---------------- Linux CP-17 Script -----------------"
	echo "Copyright (C) 2025 Caden Kegg, CP17-3039 Team Captain"
	echo "This script is distributed via GitHub under the GNU"
	echo "General Public License v3 with no warranty or guarantees."
	echo "Use at your own risk. The developer assumes no liability"
	echo "for any damage, data loss, or misuse of this script."
	echo "See the license file for detailed terms."
	echo
	echo "This script is not affiliated with, nor endorsed by,"
	echo "the CyberPatriot program or the Air and Space Forces"
	echo "Association (AFA)."
	echo "-----------------------------------------------------"
	echo
	echo "Please confirm you have answered all the forensics questions"

	read -p "(y/n):" confirm
	if [ ! "$confirm" =~ "^[yY]" ]
	then
		printerr 1 "User did not answer all forensics questions"
		printsta "0 Exiting script (1)"
		echo "Exiting script"
		exit 1
	fi

	if [ "$( id -u )" != 0 ]
	then
		echo "This script must be run as root"
		printerr 13 "Script not run as root"
		printsta "0 Requesting root access"
		echo "Root access needed"
		exec sudo "$0" "$@"
		
		if [ "$( id -u )" != 0 ]
		then
			printerr 13 "User denied access"
			printsta "1 Exiting script (13)"
			exit 13
		fi
	fi
	unalias -a
	# Get users from readme
	printsta "0 Reading users from README"

	read -r -p "Enter README file URL: " readmeURL 2>> stderr.log

	printsta "0 Downloading README file from $readmeURL"

	wget "$readmeURL" -O README${startTime}.aspx --debug --verbose --no-netrc --timestamping --append-output=wget.log 2>> stderr.log

	if [ $? -ne 0 ]
	then
		printerr 2 "Failed to download README"
		printsta "1 Exiting script (2)"
		exit 2
	fi

	cat README${startTime}.aspx 2>> stderr.log | \
		grep --color=never "<pre>" --after-context 1000 2>> stderr.log | \
		grep --color=never "</pre>" --before-context 1000 2>> stderr.log | \
		sed "1,4d;/password: /d; /<b>Authorized Users:<\/b>/d; /<\/pre>/d; /\(you\)/d" 2>> stderr.log | \
		sed  "s/\r//g;/^$/d" 2>> stderr.log | \
		sort 2>> stderr.log | \
		uniq > readme_userlist.txt 2>> stderr.log
	
	apt purge -y -qq netcat netcat-openbsd netcat-traditional ncat pnetcat socat sock socket sbd 2>> stderr.log

	printsta "0 All instances of netcat removed"

	# Get actual users and compare with `readme_userlist.txt`
	printsta "0 Getting actual users"
	cat /etc/passwd 2>> stderr.log | \
	 cut -d: -f1 2>> stderr.log | \
	 sort 2>> stderr.log | \
	 uniq > actual_userlist.txt 2>> stderr.log

	comm -13 readme_userlist.txt actual_userlist.txt 2>> stderr.log | \
	 uniq 2>> stderr.log | \
	 tr "\t" "\n" 2>> stderr.log | \
	 sed "/^$/d" > user_diff.txt 2>> stderr.log

	# Save original IFS
	# ORIGINAL_IFS=$IFS
	# IFS=
	# while read -r user
	# do
	# 	if id "$user" &>/dev/null
	# 	then
	# 		printsta "0 Removing unauthorized user: $user"
	# 		userdel -r "$user" 2>> stderr.log
	# 		if [ $? -eq 0 ]
	# 		then
	# 			printsta "0 Successfully removed user: $user"
	# 		else
	# 			printerr 3 "Failed to remove user: $user"
	# 		fi
	# 	else
	# 		printsta "0 User $user does not exist"
	# 	fi
	# done < user_diff.txt
	# # Restore original IFS
	# IFS=$ORIGINAL_IFS

	current_user=${SUDO_USER:-$(whoami)}
	while IFS=: read -r username _; do
		if [ "$username" != "$current_user" ]; then
			echo "Changing password for user: $username"
			echo "$username:J1gnleBe11\$B@tm@n\$M3||s" | chpasswd
			if [ $? -eq 0 ]; then
				printsta "0 Successfully changed password for user: $username"
			else
				printerr 4 "Failed to change password for user: $username"
			fi
		fi
	done < /etc/passwd

	echo "Installing updates and such"
	printsta "0 Installing updates and such"

	sudo add-apt-repository -y ppa:libreoffice/ppa
	wait
	sudo apt-get update -y
	wait
	sudo apt-get upgrade -y
	wait
	sudo apt-get dist-upgrade -y
	wait
	killall firefox
	wait
	sudo apt-get --purge --reinstall install firefox -y
	wait
	sudo apt-get install clamtk -y	
	wait

	# Prohibited files

	echo "Locating, backing up, and removing prohibited file types"
	printsta "0 Locating, backing up, and removing prohibited file types"
	pFiles


	echo "exit 0" > /etc/rc.local
	for file in $(ls /var/spool/cron/crontabs/*); do
		echo "0 Backing up crontab file: $file"
		# cp /var/spool/cron/crontabs/$file $BACK/$file.bak
		# echo "exit 0" > $file
	done


}

pFiles() {
	printsta "0 Locating prohibted files"

	## Media files
	find / -name "*.mov" \
		-or -name "*.mp4" \
		-or -name "*.mp3" \
		-or -name "*.wav" \
		-type f >> prohibited_files.log

	## Pictures
	# find / -name "*.png" -type f >> prohibited_files.log
	# find / -name "*.gif" -type f >> prohibited_files.log
    find / -name "*.jpg" \
		-or -name "*.jpeg" \
		-type f >> prohibited_files.log

	## Other Files
	find / -name "*.tar.gz" \
		-or -name "*.php" \
		-or -name "*backdoor*.*" \
		-type f >> prohibited_files.log

	## Items without groups
	find / -nogroup >> prohibited_files.log

	if [ ! -s prohibited_files.log ]
	then
		printsta "0 No prohibited files found"
		return
	fi

	while IFS=: read -r file; do
		if [ -f "$file" ]; then
			printsta "0 Backing up prohibited file: $file"
			cp "$file" "$PFILEBACK/"
			printsta "0 Deleting prohibited file: $file"
			rm -f "$file"
		fi
	done < prohibited_files.log

	
	cat prohibited_files.log
}

main "$@"
alias ls="ls --color=always -AFiG"